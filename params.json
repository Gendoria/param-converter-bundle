{"name":"Param-converter-bundle","tagline":"Gendoria parameter converter bundle adds some more converters to Framework Extra Bundle converters.","body":"Summary\r\n=======\r\n\r\nGendoria parameter converter bundle adds some more converters to Framework Extra Bundle converters.\r\n\r\n[![Build Status](https://img.shields.io/travis/Gendoria/param-converter-bundle/master.svg)](https://travis-ci.org/Gendoria/param-converter-bundle)\r\n[![Scrutinizer Code Quality](https://img.shields.io/scrutinizer/g/Gendoria/param-converter-bundle.svg)](https://scrutinizer-ci.com/g/Gendoria/param-converter-bundle/?branch=master)\r\n[![Code Coverage](https://img.shields.io/scrutinizer/coverage/g/Gendoria/param-converter-bundle.svg)](https://scrutinizer-ci.com/g/Gendoria/param-converter-bundle/?branch=master)\r\n[![Downloads](https://img.shields.io/packagist/dt/gendoria/param-converter-bundle.svg)](https://packagist.org/packages/gendoria/param-converter-bundle)\r\n[![Latest Stable Version](https://img.shields.io/packagist/v/gendoria/param-converter-bundle.svg)](https://packagist.org/packages/gendoria/param-converter-bundle)\r\n\r\nBundle should be compatible with all versions of PHP higher, than 5.4 (check the build status).\r\n\r\nInstallation\r\n============\r\n\r\nStep 1: Download the bundle\r\n---------------------------\r\n\r\nOpen a command console, enter your project directory and execute the\r\nfollowing command to download the latest stable version of this bundle:\r\n\r\n```bash\r\n$ composer require gendoria/param-converter \"~1\"\r\n```\r\n\r\nThis command requires you to have Composer installed globally, as explained\r\nin the [installation chapter](https://getcomposer.org/doc/00-intro.md)\r\nof the Composer documentation.\r\n\r\nStep 2: Enable the Framework Extra bundle\r\n-------------------------\r\n\r\nThis bundle requires Framework Extra bundle enabled. You can to that\r\n by adding it to the list of registered bundles in the `app/AppKernel.php` \r\nfile of your project (if not already done):\r\n\r\n```php\r\n<?php\r\n// app/AppKernel.php\r\n// ...\r\nclass AppKernel extends Kernel\r\n{\r\n    public function registerBundles()\r\n    {\r\n        $bundles = array(\r\n            // ...\r\n            new Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle(),\r\n        );\r\n        // ...\r\n    }\r\n    // ...\r\n}\r\n```\r\n\r\nStep 3: Enable the Bundle\r\n-------------------------\r\n\r\nThen, enable the bundle by adding it to the list of registered bundles\r\nin the `app/AppKernel.php` file of your project:\r\n\r\n```php\r\n<?php\r\n// app/AppKernel.php\r\n// ...\r\nclass AppKernel extends Kernel\r\n{\r\n    public function registerBundles()\r\n    {\r\n        $bundles = array(\r\n            // ...\r\n            new Gendoria\\ParamConverterBundle\\GendoriaParamConverterBundle(),\r\n        );\r\n        // ...\r\n    }\r\n    // ...\r\n}\r\n```\r\n\r\nUsage\r\n=====\r\n\r\n\r\nYou can use parameter converters from this bundle as any other parameter converters.\r\n\r\nService param converter\r\n-----------------------\r\n\r\nYou can use it by adding following call:\r\n\r\n```\r\n@ParamConverter(\"parameter_name\", converter=\"service_param_converter\", options={\"service\" = \"service_id\", \"method\" = \"service_method\", \"arguments\" = {\"%requestParamName%\", \"@otherServiceId\", \"someParameter\"})\r\n```\r\n\r\nWhere the first argument is a parameter name, converter specifies the converter to use,\r\nand options - configure the converter.\r\n\r\nRequired options are service (service ID) and method (service method). \r\nAdditionally, you can pass arguments to method by using \"arguments\" option.\r\n\r\nArguments is a list of service arguments. There are three types of them:\r\n\r\n- **Simple argument**. This is the default option. No additional parsing is added.\r\n- **Request parameter**. You have to enclose parameter name with % signs \r\n  and converter will extract it from the request. For example, \r\n  when you define argument as `%myParam%`, the service will try to fetch parameter\r\n  `myParam` from the request.\r\n- **Service parameter**. When you preceede argument with `@` character, it will be treated as a service ID.\r\n  Parser will try to fetch the service from service container and inject it to the method call.\r\n  If the service is not registered in the container, an `\\InvalidArgumentException` will be thrown.\r\n\r\nConverter parameter is only needed, when conversion may collide with other param converters\r\n(especially default `DoctrineParamConverter`).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}